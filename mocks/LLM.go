// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	llm "github.com/lordtatty/gollm/llm"
	mock "github.com/stretchr/testify/mock"
)

// LLM is an autogenerated mock type for the LLM type
type LLM struct {
	mock.Mock
}

type LLM_Expecter struct {
	mock *mock.Mock
}

func (_m *LLM) EXPECT() *LLM_Expecter {
	return &LLM_Expecter{mock: &_m.Mock}
}

// Chat provides a mock function with given fields: systemMsg, userMsg, streamCh
func (_m *LLM) Chat(systemMsg string, userMsg string, streamCh chan string) (*llm.ChatResp, error) {
	ret := _m.Called(systemMsg, userMsg, streamCh)

	if len(ret) == 0 {
		panic("no return value specified for Chat")
	}

	var r0 *llm.ChatResp
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, chan string) (*llm.ChatResp, error)); ok {
		return rf(systemMsg, userMsg, streamCh)
	}
	if rf, ok := ret.Get(0).(func(string, string, chan string) *llm.ChatResp); ok {
		r0 = rf(systemMsg, userMsg, streamCh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*llm.ChatResp)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, chan string) error); ok {
		r1 = rf(systemMsg, userMsg, streamCh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LLM_Chat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chat'
type LLM_Chat_Call struct {
	*mock.Call
}

// Chat is a helper method to define mock.On call
//   - systemMsg string
//   - userMsg string
//   - streamCh chan string
func (_e *LLM_Expecter) Chat(systemMsg interface{}, userMsg interface{}, streamCh interface{}) *LLM_Chat_Call {
	return &LLM_Chat_Call{Call: _e.mock.On("Chat", systemMsg, userMsg, streamCh)}
}

func (_c *LLM_Chat_Call) Run(run func(systemMsg string, userMsg string, streamCh chan string)) *LLM_Chat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(chan string))
	})
	return _c
}

func (_c *LLM_Chat_Call) Return(_a0 *llm.ChatResp, _a1 error) *LLM_Chat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LLM_Chat_Call) RunAndReturn(run func(string, string, chan string) (*llm.ChatResp, error)) *LLM_Chat_Call {
	_c.Call.Return(run)
	return _c
}

// NewLLM creates a new instance of LLM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLLM(t interface {
	mock.TestingT
	Cleanup(func())
}) *LLM {
	mock := &LLM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
